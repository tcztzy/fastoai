# Generated by FastOAI, DON'T EDIT
from datetime import datetime
from typing import Annotated

from openai.types.beta.thread import ToolResources
from pydantic import field_serializer
from sqlalchemy.ext.mutable import MutableDict
from sqlmodel import JSON, Column, Field, SQLModel

from .._types import as_sa_type


class Thread(SQLModel, table=True):
    id: Annotated[str, Field(primary_key=True)]
    """The identifier, which can be referenced in API endpoints."""

    created_at: datetime
    """The Unix timestamp (in seconds) for when the thread was created."""

    metadata_: Annotated[object | None, Field(sa_column=Column("metadata", MutableDict.as_mutable(JSON)))] = None
    """Set of 16 key-value pairs that can be attached to an object.

    This can be useful for storing additional information about the object in a
    structured format. Keys can be a maximum of 64 characters long and values can be
    a maximum of 512 characters long.
    """

    tool_resources: Annotated[ToolResources | None, Field(sa_type=as_sa_type(ToolResources), nullable=True)] = None
    """
    A set of resources that are made available to the assistant's tools in this
    thread. The resources are specific to the type of tool. For example, the
    `code_interpreter` tool requires a list of file IDs, while the `file_search`
    tool requires a list of vector store IDs.
    """

    @field_serializer("created_at")
    def serialize_datetime(self, dt: datetime, _) -> int:
        return int(dt.timestamp())
