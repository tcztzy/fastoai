# Generated by FastOAI, DON'T EDIT
from datetime import datetime
from typing import Annotated, Literal

from openai.types.beta.threads.message import Attachment, IncompleteDetails
from openai.types.beta.threads.message_content import MessageContent
from pydantic import field_serializer
from sqlalchemy.ext.mutable import MutableDict
from sqlmodel import JSON, Column, Enum, Field, SQLModel

from .._types import as_sa_type
from .._utils import now, random_id_with_prefix


class Message(SQLModel, table=True):
    id: Annotated[str, Field(primary_key=True, default_factory=random_id_with_prefix("msg_"))]
    """The identifier, which can be referenced in API endpoints."""

    assistant_id: str | None = None
    """
    If applicable, the ID of the
    [assistant](https://platform.openai.com/docs/api-reference/assistants) that
    authored this message.
    """

    attachments: Annotated[list[Attachment] | None, Field(sa_type=as_sa_type(list[Attachment]), nullable=True)] = None
    """A list of files attached to the message, and the tools they were added to."""

    completed_at: datetime | None = None
    """The Unix timestamp (in seconds) for when the message was completed."""

    content: Annotated[list[MessageContent], Field(sa_type=as_sa_type(list[MessageContent]))]
    """The content of the message in array of text and/or images."""

    created_at: Annotated[datetime, Field(default_factory=now)]
    """The Unix timestamp (in seconds) for when the message was created."""

    incomplete_at: datetime | None = None
    """The Unix timestamp (in seconds) for when the message was marked as incomplete."""

    incomplete_details: Annotated[IncompleteDetails | None, Field(sa_type=as_sa_type(IncompleteDetails), nullable=True)] = None
    """On an incomplete message, details about why the message is incomplete."""

    metadata_: Annotated[object | None, Field(sa_column=Column("metadata", MutableDict.as_mutable(JSON)))] = None
    """Set of 16 key-value pairs that can be attached to an object.

    This can be useful for storing additional information about the object in a
    structured format. Keys can be a maximum of 64 characters long and values can be
    a maximum of 512 characters long.
    """

    role: Annotated[Literal["user", "assistant"], Field(sa_type=Enum("user", "assistant"))]
    """The entity that produced the message. One of `user` or `assistant`."""
    run_id: str | None = None
    """
    The ID of the [run](https://platform.openai.com/docs/api-reference/runs)
    associated with the creation of this message. Value is `null` when messages are
    created manually using the create message or create thread endpoints.
    """

    status: Annotated[Literal["in_progress", "incomplete", "completed"], Field(sa_type=Enum("in_progress", "incomplete", "completed"))]
    """
    The status of the message, which can be either `in_progress`, `incomplete`, or
    `completed`.
    """
    thread_id: Annotated[str, Field(primary_key=True, default_factory=random_id_with_prefix("msg_"))]
    """
    The [thread](https://platform.openai.com/docs/api-reference/threads) ID that
    this message belongs to.
    """

    @field_serializer("completed_at", "created_at", "incomplete_at")
    def serialize_datetime(self, dt: datetime | None, _) -> int | None:
        return int(dt.timestamp()) if dt is not None else None
